#version 450

#extension GL_EXT_samplerless_texture_functions : require

//referenced https://github.com/YueZhang1027/CIS5650-Final-Project-Frostnova/tree/main

#define WORKGROUP_SIZE 32

#define VOXEL_BOUND_MIN vec3(-1024.0, -1024.0, -128.0)
#define VOXEL_BOUND_MAX vec3(1024.0, 1024.0, 128.0)
#define PI 3.14159265
#define ONE_OVER_FOURPI 0.07957747154594767
#define DENSITY_SCALE 0.01
#define INFINITY 1.0 / 0.0

#define transmittance_limit 0.01

#define EPSILON 0.1

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D targetImage;

layout(set = 0, binding = 1,std140) uniform World {
    mat4 VIEW_FROM_WORLD; // view
    vec3 CAMERA_POSITION;
    float CAMERA_NEAR;
    vec3 SUN_DIRECTION;
    float CAMERA_FAR;
    float HALF_TAN_FOV;
    float ASPECT_RATIO;
    float TIME;
    vec2 CLOUD_OFFSET;
} world_info;

layout(set = 0, binding = 2) uniform sampler3D lightGrid;

layout(set = 0, binding = 3) uniform texture2D renderPassImage;

layout(set = 0, binding = 4) uniform texture2D renderPassDepth;

layout(set = 1, binding = 0) uniform sampler3D modelingTexture;

layout(set = 1, binding = 1) uniform sampler3D fieldTexture;

layout(set = 1, binding = 2) uniform sampler3D cloudNoiseTexture;

// structs
struct VoxelCloudModelingData {
    float mDimensionalProfile;
    float mDetailType;
    float mDensityScale;
    float mSdf;
};

struct VoxelCloudDensitySamples {
    float mProfile; // profile
    float mFull;    // detail
};

struct CloudRenderingRaymarchInfo {
    float mDistance;       // ray marching distance
    float mCloudDistance;  // distance to cloud
    float mStepSize;       // step size
    vec2 mLimit;           // limit
};

struct CloudRenderingPixelData {
    float mDensity;
    float mTransmittance;
    float mAlpha;
    vec3 mCloudColor;
    vec3 mSkyColor;
    vec3 mSkyColorNoSun;
    float mSunDisk;
    float mNight;
};

struct Ray {
	vec3 mOrigin;
	vec3 mDirection;
};

struct Intersection {
    vec3 mNormal;
    vec3 mPoint;
    float mTime;
};

float DepthToViewDistance(float depth) {
    float z_ndc = depth * 2.0 - 1.0; // Convert [0, 1] depth to NDC [-1, 1]
    float z_view = (2.0 * world_info.CAMERA_NEAR * world_info.CAMERA_FAR) / (world_info.CAMERA_FAR + world_info.CAMERA_NEAR - z_ndc * (world_info.CAMERA_FAR - world_info.CAMERA_NEAR));
    return z_view;
}


float ValueRemap(float inValue, float inOldMin, float inOldMax, float inMin, float inMax) {
    float old_min_max_range = (inOldMax - inOldMin);
    float clamped_normalized = clamp((inValue - inOldMin) / old_min_max_range, 0, 1);
    return inMin + (clamped_normalized * (inMax - inMin));
}

float ValueErosion(float inValue, float inOldMin) {
    // derrived from Set-Range, this function uses the oldMin to erode or inflate the input value. - inValues inflate while + inValues erode
    float old_min_max_range = 1.0 - inOldMin;
    float clamped_normalized = clamp((inValue - inOldMin) / old_min_max_range, 0, 1);
    return clamped_normalized;
}

float GetFractionFromValue(float inValue, float inMin, float inMax) {
    return clamp((inValue - inMin) / (inMax - inMin), 0, 1);
}

// Detail density sample from sample code fragments provided in https://advances.realtimerendering.com/s2023/index.html#Nubis3
float GetUprezzedVoxelCloudDensity(CloudRenderingRaymarchInfo inRaymarchInfo, vec3 inSamplePosition, float inDimensionalProfile, float inType, float inDensityScale, float inMipLevel, bool inHFDetails)
{
    // Apply wind offset 
	inSamplePosition -= vec3(world_info.CLOUD_OFFSET.x, world_info.CLOUD_OFFSET.y, 0.0) * world_info.TIME * 10;
	
	// Sample noise
	vec4 noise = texture(cloudNoiseTexture, inSamplePosition * 0.01);

	// Define wispy noise
	float wispy_noise = mix(noise.r, noise.g, inDimensionalProfile);

	// Define billowy noise 
	float billowy_type_gradient = pow(inDimensionalProfile, 0.25);
	float billowy_noise = mix(noise.b * 0.3, noise.a * 0.3, billowy_type_gradient);

	// Define Noise composite - blend to wispy as the density scale decreases.
	float noise_composite = mix(wispy_noise, billowy_noise, inType);

	// Get the hf noise which is to be applied nearby - First, get the distance from the sample to camera and only do the work within a distance of 150 meters. 
	if (inHFDetails)
	{
		// Get the hf noise by folding the highest frequency billowy noise. 
		float hhf_noise = clamp(mix(1.0 - pow(abs(abs(noise.g * 2.0 - 1.0) * 2.0 - 1.0), 4.0), pow(abs(abs(noise.a * 2.0 - 1.0) * 2.0 - 1.0), 2.0), inType), 0, 1);
	
		// Apply the HF nosie near camera.
		float hhf_noise_distance_range_blender = ValueRemap(inRaymarchInfo.mDistance, 50.0, 150.0, 0.9, 1.0);
		noise_composite = mix(hhf_noise, noise_composite, hhf_noise_distance_range_blender);
	}

	// Composote Noises and use as a Value Erosion
	float uprezzed_density = ValueErosion(inDimensionalProfile, noise_composite);

	// Modify User density scale
	float powered_density_scale = pow(clamp(inDensityScale, 0.0, 1.0), 4.0);

	// Apply User Density Scale Data to Result
	uprezzed_density *= powered_density_scale; 
		
	// Sharpen result
	uprezzed_density = pow(uprezzed_density, mix(0.3, 0.6, max(EPSILON, powered_density_scale)));
	if (inHFDetails)
	{
		float hhf_noise_distance_range_blender = GetFractionFromValue(inRaymarchInfo.mDistance, 50.0, 150.0);
		uprezzed_density = pow(uprezzed_density, mix(0.5, 1.0, hhf_noise_distance_range_blender)) * mix(0.666, 1.0, hhf_noise_distance_range_blender);
	}

    return uprezzed_density;
}


VoxelCloudDensitySamples GetVoxelCloudDensitySamples(CloudRenderingRaymarchInfo inRaymarchInfo, VoxelCloudModelingData modeling_data, vec3 samplePosition, float inMipLevel, bool inHFDetails) {
    VoxelCloudDensitySamples density_samples;
    density_samples.mProfile = 0.0;
	density_samples.mFull = 0.0;

    float dimensional_profile = modeling_data.mDimensionalProfile;
    float type = modeling_data.mDetailType;
    float density_scale = modeling_data.mDensityScale;

    if (dimensional_profile > 0.0) {
        density_samples.mProfile = dimensional_profile * density_scale;

        density_samples.mFull = GetUprezzedVoxelCloudDensity(inRaymarchInfo, samplePosition, dimensional_profile, type, density_scale, inMipLevel, inHFDetails) // TODO: check profile
                                    * ValueRemap(inRaymarchInfo.mDistance, 10.0, 120.0, 0.25, 1.0);
    }

    return density_samples;
}

vec3 GetSampleCoord(vec3 inSamplePosition) {
    vec3 sample_coord = (inSamplePosition - VOXEL_BOUND_MIN) / (VOXEL_BOUND_MAX - VOXEL_BOUND_MIN);
    
    sample_coord.xy = vec2(1.0) - sample_coord.xy;
    return sample_coord;
}

//generates ray for the current camera and pixel
Ray GenerateRay(vec2 uv) {
    Ray ray;

    vec3 camLook =   normalize(vec3(world_info.VIEW_FROM_WORLD[0][2], world_info.VIEW_FROM_WORLD[1][2], world_info.VIEW_FROM_WORLD[2][2]));
    vec3 camRight =  normalize(vec3(world_info.VIEW_FROM_WORLD[0][0], world_info.VIEW_FROM_WORLD[1][0], world_info.VIEW_FROM_WORLD[2][0]));
    vec3 camUp =     normalize(vec3(world_info.VIEW_FROM_WORLD[0][1], world_info.VIEW_FROM_WORLD[1][1], world_info.VIEW_FROM_WORLD[2][1]));

    vec2 screenPoint = uv * 2.0 - 1.0;

    vec3 cameraPos = world_info.CAMERA_POSITION.xyz;
    vec3 refPoint = cameraPos - camLook;
    vec3 p = refPoint 
             + world_info.ASPECT_RATIO * screenPoint.x * world_info.HALF_TAN_FOV * camRight 
             - screenPoint.y * world_info.HALF_TAN_FOV * camUp;

    ray.mOrigin = cameraPos;
    ray.mDirection = normalize(p - cameraPos);

    return ray;
}

VoxelCloudModelingData GetVoxelCloudModelingData(vec3 inSamplePosition, float inMipLevel) {
    VoxelCloudModelingData modeling_data;
    vec4 Modeling_NVDF;

    Modeling_NVDF.rgb = texture(modelingTexture, inSamplePosition).rgb;
    Modeling_NVDF.a = texture(fieldTexture, inSamplePosition).r;
	
    modeling_data.mDimensionalProfile = Modeling_NVDF.r;
    modeling_data.mDetailType = Modeling_NVDF.g;
    modeling_data.mDensityScale = Modeling_NVDF.b;
    modeling_data.mSdf = ValueRemap(Modeling_NVDF.a, 0.0, 1.0, -256.0, 4096.0);

    return modeling_data;
}

// determine the range of the ray march
void SetRaymarchLimit(Ray ray, inout CloudRenderingRaymarchInfo raymarch_info, float viewDistance) {
    float tmin = 4096.0, tmax = -4096.0;

    if (ray.mOrigin.x >= VOXEL_BOUND_MIN.x && ray.mOrigin.x <= VOXEL_BOUND_MAX.x && 
        ray.mOrigin.y >= VOXEL_BOUND_MIN.y && ray.mOrigin.y <= VOXEL_BOUND_MAX.y && 
        ray.mOrigin.z >= VOXEL_BOUND_MIN.z && ray.mOrigin.z <= VOXEL_BOUND_MAX.z) {
		tmin = 0.0;
	}

    // x axis
    if (ray.mDirection.x != 0.0) {
		float t1 = abs((VOXEL_BOUND_MAX.x - ray.mOrigin.x) / ray.mDirection.x);
        vec3 p = ray.mOrigin + ray.mDirection * t1;
        if (p.y >= VOXEL_BOUND_MIN.y && p.y <= VOXEL_BOUND_MAX.y && p.z >= VOXEL_BOUND_MIN.z && p.z <= VOXEL_BOUND_MAX.z) {
            tmin = min(tmin, t1);
            tmax = max(tmax, t1);
		}

        float t2 = abs((VOXEL_BOUND_MIN.x - ray.mOrigin.x) / ray.mDirection.x);
		p = ray.mOrigin + ray.mDirection * t2;
		if (p.y >= VOXEL_BOUND_MIN.y && p.y <= VOXEL_BOUND_MAX.y && p.z >= VOXEL_BOUND_MIN.z && p.z <= VOXEL_BOUND_MAX.z) {
			tmin = min(tmin, t2);
			tmax = max(tmax, t2);
		}
	} 

	// y axis
	if (ray.mDirection.y != 0.0) {
		float t1 = abs((VOXEL_BOUND_MAX.y - ray.mOrigin.y) / ray.mDirection.y);
		vec3 p = ray.mOrigin + ray.mDirection * t1;
		if (p.x >= VOXEL_BOUND_MIN.x && p.x <= VOXEL_BOUND_MAX.x && p.z >= VOXEL_BOUND_MIN.z && p.z <= VOXEL_BOUND_MAX.z) {
			tmin = min(tmin, t1);
			tmax = max(tmax, t1);
		}

        float t2 = abs((VOXEL_BOUND_MIN.y - ray.mOrigin.y) / ray.mDirection.y);
        p = ray.mOrigin + ray.mDirection * t2;
		if (p.x >= VOXEL_BOUND_MIN.x && p.x <= VOXEL_BOUND_MAX.x && p.z >= VOXEL_BOUND_MIN.z && p.z <= VOXEL_BOUND_MAX.z) {
			tmin = min(tmin, t2);
			tmax = max(tmax, t2);
		}
	} 

	// z axis
	if (ray.mDirection.z != 0.0) {
		float t1 = abs((VOXEL_BOUND_MAX.z - ray.mOrigin.z) / ray.mDirection.z);
		vec3 p = ray.mOrigin + ray.mDirection * t1;
		if (p.x >= VOXEL_BOUND_MIN.x && p.x <= VOXEL_BOUND_MAX.x && p.y >= VOXEL_BOUND_MIN.y && p.y <= VOXEL_BOUND_MAX.y) {
			tmin = min(tmin, t1);
			tmax = max(tmax, t1);
		}

        float t2 = abs((VOXEL_BOUND_MIN.z - ray.mOrigin.z) / ray.mDirection.z);
		p = ray.mOrigin + ray.mDirection * t2;
        if (p.x >= VOXEL_BOUND_MIN.x && p.x <= VOXEL_BOUND_MAX.x && p.y >= VOXEL_BOUND_MIN.y && p.y <= VOXEL_BOUND_MAX.y) {
			tmin = min(tmin, t2);
			tmax = max(tmax, t2);
		}
	}

    tmax = min(tmax, viewDistance);

    raymarch_info.mLimit = vec2(tmin, tmax);
    raymarch_info.mDistance = raymarch_info.mLimit.x;
}

//--------------------------------------------------------
//					Lighting Functions
//--------------------------------------------------------
float HG(float cos_angle, float eccentricity) {
    float g2 = eccentricity * eccentricity;
    float val = ((1.0 - g2) / pow(1.0 + g2 - 2.0 * eccentricity * cos_angle , 1.5)) * ONE_OVER_FOURPI;
    return val ;
}

float Remap(float original_value, float original_min, float original_max, float new_min, float new_max)
{
    return new_min + (((original_value - original_min) / (original_max - original_min)) * (new_max - new_min));
}

float GetHeightFractionForPoint(vec3 inPosition, float cloudMin, float cloudMax)
{
    float height_fraction = (inPosition.z - cloudMin) / (cloudMax - cloudMin);
    return clamp(height_fraction, 0, 1);
}

float GetDensityToSun(CloudRenderingRaymarchInfo inRaymarchInfo, VoxelCloudModelingData modeling_data,
                      vec3 samplePos, vec3 lightDir)
{
    float totalDensity = 0.0;
    vec3 pos = samplePos;
    vec3 sampleCoord;

    for (int i = 0; i < 2; i++) {
        pos += lightDir * inRaymarchInfo.mStepSize;
        sampleCoord = GetSampleCoord(pos);
        totalDensity += GetVoxelCloudDensitySamples(inRaymarchInfo, modeling_data, sampleCoord, 1.0, false).mFull;
    }

    pos += lightDir * inRaymarchInfo.mStepSize;
    sampleCoord = GetSampleCoord(pos);   
    totalDensity += texture(lightGrid, sampleCoord).r;

    return totalDensity;
}

float GetDensityLowLOD(vec3 sampleCoord) {
    return texture(lightGrid, sampleCoord).g;
}

void IntegrateLightEnergy(CloudRenderingRaymarchInfo inRaymarchInfo, VoxelCloudModelingData modeling_data,
                    VoxelCloudDensitySamples sampleData, 
                    vec3 samplePosition, vec3 sampleCoord, vec3 lightDir, float cos_angle, 
                    inout CloudRenderingPixelData ioPixelData) 
{
    float profile = sampleData.mProfile;

    // Cloud distance
    float cloud_distance = inRaymarchInfo.mCloudDistance;

    // Calculate Density to Sun
    float density_to_sun = GetDensityToSun(inRaymarchInfo, modeling_data, samplePosition, lightDir);

    // Calculate Low LOD Density
    float density_Lod = GetDensityLowLOD(sampleCoord);

    // Calculate Height Fraction
    float height_fraction = GetHeightFractionForPoint(samplePosition, VOXEL_BOUND_MIN.z, VOXEL_BOUND_MAX.z);

    // Ambient
    profile *= exp(-density_to_sun * Remap(cos_angle, 0.0, 0.9, 0.25, Remap(cloud_distance, -128.0, 0.0, 0.05, 0.25)));
    float ambient_scattering = pow(1.0 - profile, 0.5) * exp(-density_to_sun);

    
    // Light Energy
    float silver_spread = 1.32;
    float silver_intensity = 1.27;
    float brightness = 0.5;
    float eccentricity = 1.0;

    // Attenuation
    float primary_attenuation = exp(-density_to_sun);
    float secondary_attenuation = exp(-density_to_sun * 0.25) * 0.7;
    float attenuation_probability = max(Remap(cos_angle, 0.7, 1.0, secondary_attenuation, secondary_attenuation * 0.25) , primary_attenuation);
     
    // In-scattering 
    float depth_probability = mix(0.05 + pow(density_Lod, Remap(0.5, 0.3, 0.85, 0.5, 2.0 )), 1.0, clamp(density_to_sun/0.5, 0, 1));
    float vertical_probability = pow(Remap(0.5, 0.07, 0.14, 0.1, 1.0 ), 0.8);
    float in_scatter_probability = clamp(depth_probability * vertical_probability, 0, 1);

    // Phase probability
    float phase_probability = max(HG(cos_angle, eccentricity), silver_intensity * HG(cos_angle, 0.99 - silver_spread));

    float light_energy = attenuation_probability * in_scatter_probability * phase_probability * brightness;
    //float light_energy = density_to_sun;

    light_energy = exp(-light_energy * 5);

    vec3 white = vec3(1, 1, 1);
    vec3 _colB = mix(ioPixelData.mSkyColorNoSun, vec3(0.23f, 0.36f, 0.47f), clamp(-lightDir.z + 0.5, 0, 1));
    vec3 _colA = mix(ioPixelData.mSkyColorNoSun, vec3(1.0, 0.87, 0.65), clamp(-lightDir.z + 0.2, 0, 1));

    float _colorOffset1 = 0.16;
    float _colorOffset2 = 12.6;

    vec3 cloudColor = mix(_colA, white, clamp(light_energy * _colorOffset1, 0, 1));
    cloudColor = mix(_colB, cloudColor, clamp(pow(light_energy * _colorOffset2, 3), 0, 1)); 
    if(ioPixelData.mDensity <= 1.0)
    {
        cloudColor = (1 - ambient_scattering) * cloudColor + ambient_scattering * _colB;
    }
  
    ioPixelData.mTransmittance += sampleData.mFull * light_energy * ioPixelData.mAlpha; 
    ioPixelData.mCloudColor += sampleData.mFull * cloudColor * ioPixelData.mAlpha;
    ioPixelData.mAlpha *= exp(-sampleData.mFull * 1.0);  
}


void RaymarchVoxelClouds(Ray ray, vec3 lightDir, inout CloudRenderingPixelData ioPixelData, ivec2 pixel) {
    CloudRenderingRaymarchInfo raymarch_info;
    raymarch_info.mDistance = 0.0;

    float depthValue = texelFetch(renderPassDepth, pixel, 0).r;
    float viewDistance = (depthValue == 1.0) ? INFINITY : DepthToViewDistance(depthValue);
    // Intersect with bounding box
    SetRaymarchLimit(ray, raymarch_info, viewDistance);

    float cos_angle = dot(ray.mDirection, lightDir);
    while (ioPixelData.mTransmittance > transmittance_limit &&
        (raymarch_info.mDistance < raymarch_info.mLimit.y)) {
        vec3 sample_position = ray.mOrigin + ray.mDirection * raymarch_info.mDistance;
        vec3 sample_coord = GetSampleCoord(sample_position);
        
        VoxelCloudModelingData modeling_data = GetVoxelCloudModelingData(sample_coord, 0.0);
        // Adaptive Step Size
        float adaptive_step_size = max(1.0, max(sqrt(raymarch_info.mDistance), EPSILON) * 0.08);

        raymarch_info.mCloudDistance = modeling_data.mSdf; // raymarch_info.mCloudDistance = GetVoxelCloudDistance(sample_position);

        // Max SDF and Step Size
        raymarch_info.mStepSize = max(raymarch_info.mCloudDistance * 0.5, adaptive_step_size);
        
        if (sample_coord.x >= 0.0 && sample_coord.x <= 1.0 && sample_coord.y >= 0.0 && sample_coord.y <= 1.0 && sample_coord.z >= 0.0 && sample_coord.z <= 1.0) { 
                    
            // Jitter

            if (raymarch_info.mCloudDistance < 0.0) {
                VoxelCloudDensitySamples voxel_cloud_sample_data = GetVoxelCloudDensitySamples(raymarch_info, modeling_data, sample_position, 1.0, true); // sample_position?
                
                if (voxel_cloud_sample_data.mProfile > 0.0) {		         
                    ioPixelData.mDensity += voxel_cloud_sample_data.mFull;
                    IntegrateLightEnergy(raymarch_info, modeling_data, voxel_cloud_sample_data, 
                        sample_position, sample_coord, lightDir, cos_angle, ioPixelData);                   
                }
            }
        
        }

        raymarch_info.mDistance += raymarch_info.mStepSize;
    }
}


void main()
{
    ivec2 dimension = imageSize(targetImage);

    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = vec2(pixel) / dimension;

    vec3 sunDir = world_info.SUN_DIRECTION;

    // Get Camera Ray
    Ray ray = GenerateRay(uv);

    CloudRenderingPixelData ioPixelData;
    ioPixelData.mDensity = 0.0;
    ioPixelData.mTransmittance = 1.0;
    ioPixelData.mAlpha = 1.0;
    ioPixelData.mCloudColor = vec3(0);
    ioPixelData.mSunDisk = 0.0;
    ioPixelData.mSkyColor = vec3(0.1,0.5,0.6);
    

    // Raymarch
    RaymarchVoxelClouds(ray, sunDir, ioPixelData, pixel);  

    vec3 bgColor = texelFetch(renderPassImage, pixel, 0).rgb;
    // Draw the Sun
    float angleFromSun = acos(clamp(dot(ray.mDirection, sunDir), -0.999999, 0.999999)) * 180.0 / PI;
    if(angleFromSun < 1.5)
    {
        bgColor = vec3(1, 1, 1);
    }
    vec3 cloudColor = vec3(0.3,0.3,0.6) * vec3(max(0.0, ioPixelData.mTransmittance));
    vec4 finalColor = vec4(mix(bgColor, cloudColor, (1 - ioPixelData.mAlpha)), 1.0);


    imageStore(targetImage, pixel, vec4(finalColor));
}